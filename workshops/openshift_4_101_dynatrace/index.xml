<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenShift 4 101 w/Dynatrace on Red Hat | Public Sector</title>
    <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/</link>
    <description>Recent content in OpenShift 4 101 w/Dynatrace on Red Hat | Public Sector</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="http://redhatgov.io/workshops/openshift_4_101_dynatrace/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lab 0 - Deploy Your Own Terminal</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab0-terminal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab0-terminal/</guid>
      <description>Accessing OpenShift OpenShift provides a web console that allows you to perform various tasks via a web browser.
Let&#39;s Login to the Web Console  Use your browser to navigate to the URI provided by your instructor and login with the user/password provided.
 https://console-openshift-console.apps.example.redhatgov.io  Login Webpage
Once logged in you should see your available projects - or a button to create a project if none exist already:</description>
    </item>
    
    <item>
      <title>Lab 1 - Welcome</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab1-welcome/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab1-welcome/</guid>
      <description>Welcome to OpenShift! This lab provides a quick tour of the console to help you get familiar with the user interface along with some key terminology we will use in subsequent lab content. If you are already familiar with the basics of OpenShift simply ensure you can login and create the project.
Key Terms We will be using the following terms throughout the workshop labs so here are some basic definitions you should be familiar with.</description>
    </item>
    
    <item>
      <title>Lab 10 - Labels (Optional)</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab10-labels/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab10-labels/</guid>
      <description>Labels This is a pretty simple lab, we are going to explore labels. You can use labels to organize, group, or select API objects.
For example, pods are &amp;quot;tagged&amp;quot; with labels, and then services use label selectors to identify the pods they proxy to. This makes it possible for services to reference groups of pods, even treating pods with potentially different docker containers as related entities.
Labels on a pod In a previous lab we added our web app using a S2I template.</description>
    </item>
    
    <item>
      <title>Lab 11 - Webhooks and Rollbacks (Optional)</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab11-cicd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab11-cicd/</guid>
      <description>Build Triggers, Webhooks and Rollbacks - Oh My! Once you have an app deployed in OpenShift you can take advantage of some continuous capabilities that help to enable DevOps and automate your management process. We will cover some of those in this lab: Build triggers, webhooks, and rollbacks.
A bit of configuration We are going to do some integration and coding with an external git repository. For this lab we are going to use github, if you don&#39;t already have an account, you can create one here.</description>
    </item>
    
    <item>
      <title>Lab 12 - Blue | Green Deployment (Optional)</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab12-bluegreen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab12-bluegreen/</guid>
      <description>Blue/Green deployments When implementing continuous delivery for your software one very useful technique is called Blue/Green deployments. It addresses the desire to minimize downtime during the release of a new version of an application to production. Essentially, it involves running two production versions of your app side-by-side and then switching the routing from the last stable version to the new version once it is verified. Using OpenShift, this can be very seamless because using containers we can easily and rapidly deploy a duplicate infrastructure to support alternate versions and modify routes as a service.</description>
    </item>
    
    <item>
      <title>Lab 2 - BYO Container</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab2-byocontainer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab2-byocontainer/</guid>
      <description>Bring your own docker It&#39;s easy to get started with OpenShift whether you&#39;re using our app templates or bringing your existing assets. In this quick lab we will deploy an application using an exisiting container image. OpenShift will create an image stream for the image as well as deploy and manage containers based on that image. And we will dig into the details to show how all that works.</description>
    </item>
    
    <item>
      <title>Lab 3 - Install Dynatrace Agent</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab3-installagent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab3-installagent/</guid>
      <description>Deploy the Dynatrace OneAgent Operator on OpenShift 4.4+  Prerequisites 1) If no existing account Sign-up for a trial with Dynatrace at https://www.dynatrace.com/trial/ 2) Dynatrace API token from Settings  Integration  Dynatrace API 3) Dynatrace PaaS token PaaS (used to download OneAgent and ActiveGate installers) from Settings  Integration  Platform as a Service 4) apiUrl - URL to the API of your Dynatrace environment. In Dynatrace SaaS it will look like https://.</description>
    </item>
    
    <item>
      <title>Lab 4 - Configuring Dynatrace ActiveGuard (Optional)</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab4-configdynatraceactiveguard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab4-configdynatraceactiveguard/</guid>
      <description>Connecting your OpenShift clusters to Dynatrace to take advantage of the dedicated OpenShift overview page requires that you run an ActiveGate in your environment (version 1.163+).
 See https://www.dynatrace.com/support/help/technology-support/cloud-platforms/openshift/monitoring/monitor-openshift-clusters-with-dynatrace/
 oc project dynatrace oc apply -f https://www.dynatrace.com/support/help/codefiles/kubernetes/kubernetes-monitoring-service-account.yaml serviceaccount/dynatrace-monitoring created clusterrole.rbac.authorization.k8s.io/dynatrace-monitoring-cluster created clusterrolebinding.rbac.authorization.k8s.io/dynatrace-monitoring-cluster created   oc config view --minify -o jsonpath=&#39;{.clusters[0].cluster.server}&#39; https://api.ocp4.local:6443   &amp;lt;blockquote&amp;gt; Get the Bearer token for the OpenShift cluster using the following command:
 Copy the secret returned by the following command: &amp;lt;/blockquote&amp;gt;</description>
    </item>
    
    <item>
      <title>Lab 5 - Deploying an App with S2I</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab5-s2i/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab5-s2i/</guid>
      <description>Source to Image (S2I) One of the useful components of OpenShift is its source-to-image capability. S2I is a framework that makes it easy to turn your source code into runnable images. The main advantage of using S2I for building reproducible docker images is the ease of use for developers. You&#39;ll see just how simple it can be in this lab.
Let&#39;s build a node.js web app, using S2I We can do this either via the command line or the web console.</description>
    </item>
    
    <item>
      <title>Lab 6 - Deploying a 3 Tier App</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab6-deploy3tierapp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab6-deploy3tierapp/</guid>
      <description>Deploying a 3 Tier App This builds on the work done in the labs so far to deploy a 3 Tier App. The reason for this lab are to highlight the capabilities of OpenShift to handle more complex application stacks and to show how Dynatrace automatically captures new applications and interactions between them.
 Instructions are located in a Red Hat blog post at:  https://developers.redhat.com/articles/deploy-a-NodeJS-app-OpenShift   Workshop Details   Domain     Workshop    Student ID     Student ID 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200   Domain redhatgov.</description>
    </item>
    
    <item>
      <title>Lab 7 - Developing and Managing Your Application</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab7-devmanage/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab7-devmanage/</guid>
      <description>Developing and managing an application in OpenShift In this lab we will explore some of the common activities undertaken by developers working in OpenShift. You will become familiar with how to use environment variables, secrets, build configurations, and more. Let&#39;s look at some of the basic things a developer might care about for a deployed app.
Setup From the previous lab you should have the DC Metro Maps web app running in OpenShift.</description>
    </item>
    
    <item>
      <title>Lab 8 - Webhooks and Rollbacks (Optional)</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab8-rollbacks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab8-rollbacks/</guid>
      <description>Build Triggers, Webhooks and Rollbacks - Oh My! Once you have an app deployed in OpenShift you can take advantage of some continuous capabilities that help to enable DevOps and automate your management process. We will cover some of those in this lab: Build triggers, webhooks, and rollbacks.
A bit of configuration We are going to do some integration and coding with an external git repository. For this lab we are going to use github, if you don&#39;t already have an account, you can create one here.</description>
    </item>
    
    <item>
      <title>Lab 9 - Replication and Recovery (Optional)</title>
      <link>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab9-replicationrecovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://redhatgov.io/workshops/openshift_4_101_dynatrace/lab9-replicationrecovery/</guid>
      <description>Things will go wrong, and that&#39;s why we have replication and recovery Things will go wrong with your software, or your hardware, or from something out of your control. But we can plan for that failure, and planning for it let&#39;s us minimize the impact. OpenShift supports this via what we call replication and recovery.
Replication Let&#39;s walk through a simple example of how the replication controller can keep your deployment at a desired state.</description>
    </item>
    
  </channel>
</rss>